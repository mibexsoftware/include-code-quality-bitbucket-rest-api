swagger: '2.0'
info:
  description: |-
    REST API documentation for the plug-in Sonar for Bitbucket Server.
                                        The REST API allows you to maintain the repository and project settings of the
                                        plug-in as well as the Sonar server configurations.
                                        With repository settings you can specify the behaviour of the plug-in for each
                                        repository individually. Project settings allow you to reuse common settings across
                                        all repositories of your Bitbucket project. SonarQube server configurations offer
                                        you a way to reuse the connection settings of your SonarQube server(s) in all
                                        your repositories.
  version: v1
  title: Sonar for Bitbucket Server REST API
  contact:
    name: Mibex Software GmbH
    url: 'https://www.mibexsoftware.com'
  license:
    name: 'Copyright (c) 2021 by Mibex Software GmbH, Switzerland. All rights reserved.'
    url: 'https://mibexsoftware.com/imprint/'
host: YOUR_BITBUCKET_SERVER
basePath: /rest/sonar4stash/1.0
tags:
  - name: Project settings
  - name: Repository settings
  - name: Sonar server configurations
  - name: Sonar user token configuration
schemes:
  - http
  - https
paths:
  '/projects/{projectKey}/repos/{repositorySlug}/settings':
    get:
      tags:
        - Repository settings
      summary: Returns the repository settings of the plug-in.
      description: ''
      operationId: getRepositorySettings
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: projectKey
          in: path
          required: true
          type: string
        - name: repositorySlug
          in: path
          required: true
          type: string
      responses:
        '200':
          description: Repository settings found
        '401':
          description: The currently authenticated user does not have REPO_ADMIN permissions
        '404':
          description: The given repository does not exist or there are no settings for this repository
    post:
      tags:
        - Repository settings
      summary: Creates or updates the repository settings for the plug-in.
      description: ''
      operationId: createOrUpdateRepositorySettings
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: projectKey
          in: path
          required: true
          type: string
        - name: repositorySlug
          in: path
          required: true
          type: string
        - in: body
          name: Repository Settings
          required: true
          schema:
            $ref: '#/definitions/RestRepoConfig'
      responses:
        '200':
          description: Repository settings saved
        '400':
          description: Invalid parameters or mandatory parameters not passed
        '401':
          description: The currently authenticated user does not have REPO_ADMIN permissions
        '404':
          description: The given repository does not exist or there are no settings for this repository
    delete:
      tags:
        - Repository settings
      summary: Deletes repository settings for the plug-in.
      description: ''
      operationId: deleteRepositorySettings
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: projectKey
          in: path
          required: true
          type: string
        - name: repositorySlug
          in: path
          required: true
          type: string
      responses:
        '200':
          description: Repository configuration deleted
        '401':
          description: The currently authenticated user does not have REPO_ADMIN permissions
        '404':
          description: The given repository does not exist or there are no settings for this repository
  '/projects/{projectKey}/settings':
    get:
      tags:
        - Project settings
      summary: Returns the project settings of the plug-in.
      description: ''
      operationId: getProjectSettings
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: projectKey
          in: path
          required: true
          type: string
      responses:
        '200':
          description: Project settings found
        '401':
          description: The currently authenticated user does not have PROJECT_ADMIN permissions
        '404':
          description: The given project does not exist or there are no settings for this project
    post:
      tags:
        - Project settings
      summary: Creates or updates project settings for the plug-in.
      description: ''
      operationId: createOrUpdateProjectSettings
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: projectKey
          in: path
          required: true
          type: string
        - in: body
          name: Project Settings
          required: true
          schema:
            $ref: '#/definitions/RestProjectConfig'
      responses:
        '200':
          description: Project settings saved
        '400':
          description: Invalid parameters or mandatory parameters not passed
        '401':
          description: The currently authenticated user does not have PROJECT_ADMIN permissions
        '404':
          description: The given project does not exist or there are no settings for this project
    delete:
      tags:
        - Project settings
      summary: Deletes project settings for the plug-in.
      description: ''
      operationId: deleteProjectSettings
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: projectKey
          in: path
          required: true
          type: string
      responses:
        '200':
          description: Project configuration deleted
        '401':
          description: The currently authenticated user does not have PROJECT_ADMIN permissions
        '404':
          description: The given project does not exist or there are no settings for this project
  /sonar-server-configs:
    get:
      tags:
        - Sonar server configurations
      summary: Returns the SonarQube server configurations.
      description: ''
      operationId: getSonarServerConfigurations
      consumes:
        - application/json
      produces:
        - application/json
      parameters: []
      responses:
        '200':
          description: SonarQube server configurations found
        '401':
          description: The currently authenticated user does not have ADMIN credentials
    post:
      tags:
        - Sonar server configurations
      summary: Creates a SonarQube server configuration.
      description: ''
      operationId: createSonarServerConfiguration
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: SonarQube server configuration
          required: true
          schema:
            $ref: '#/definitions/RestAdminConfig'
      responses:
        '200':
          description: SonarQube server configuration updated
        '400':
          description: A validation error for the given input occurred
        '401':
          description: The currently authenticated user does not have ADMIN credentials
    put:
      tags:
        - Sonar server configurations
      summary: Updates a SonarQube server configuration.
      description: ''
      operationId: updateSonarServerConfiguration
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: SonarQube server configuration
          required: true
          schema:
            $ref: '#/definitions/RestAdminConfig'
      responses:
        '200':
          description: SonarQube server configuration updated
        '401':
          description: The currently authenticated user does not have ADMIN credentials
        '404':
          description: The SonarQube server configuration does not exist
    delete:
      tags:
        - Sonar server configurations
      summary: Deletes a SonarQube server configuration.
      description: ''
      operationId: deleteSonarServerConfiguration
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: id
          in: query
          required: false
          type: integer
          format: int32
        - name: fallbackServerId
          in: query
          required: false
          type: integer
          format: int32
        - name: removeRepoConfig
          in: query
          required: false
          type: boolean
      responses:
        '200':
          description: SonarQube server configuration deleted
        '400':
          description: The arguments are not valid. Either a valid fallbackServerId or removeRepoConfig is required
        '401':
          description: The currently authenticated user does not have ADMIN credentials
        '404':
          description: The SonarQube server configuration does not exist
  /sonar-server-configs/repos-using-sonar-server:
    get:
      tags:
        - Sonar server configurations
      summary: Returns a list of repos using a Sonar config
      description: ''
      operationId: getReposUsingSonarServer
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: id
          in: query
          required: false
          type: integer
          format: int32
      responses:
        '200':
          description: SonarQube server configurations found
        '401':
          description: The currently authenticated user does not have ADMIN credentials
        '404':
          description: Sonar server not found
  '/user-tokens/{userSlug}':
    get:
      tags:
        - Sonar user token configuration
      summary: Returns the SonarQube user tokens for a specific Bitbucket user.
      description: ''
      operationId: getUserTokens
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: userSlug
          in: path
          required: true
          type: string
      responses:
        '200':
          description: SonarQube user tokens returned
        '401':
          description: The authenticated user does not match the one tokens are requested for
    post:
      tags:
        - Sonar user token configuration
      summary: Creates a SonarQube user token configuration.
      description: ''
      operationId: addUserToken
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: userSlug
          in: path
          required: true
          type: string
        - in: body
          name: SonarQube user token configuration
          required: true
          schema:
            $ref: '#/definitions/RestUserToken'
      responses:
        '200':
          description: SonarQube user token configuration created
        '400':
          description: A validation error for the given input occurred
        '401':
          description: The authenticated user does not match the one tokens are requested for
        '404':
          description: The SonarQube user does not exist
    put:
      tags:
        - Sonar user token configuration
      summary: Updates a SonarQube user token configuration.
      description: ''
      operationId: updateUserToken
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: userSlug
          in: path
          required: true
          type: string
        - in: body
          name: SonarQube user token configuration
          required: true
          schema:
            $ref: '#/definitions/RestUserToken'
      responses:
        '200':
          description: SonarQube user token configuration updated
        '400':
          description: A validation error for the given input occurred
        '401':
          description: The authenticated user does not match the one tokens are requested for
        '404':
          description: The SonarQube user does not exist
    delete:
      tags:
        - Sonar user token configuration
      summary: Deletes a SonarQube user token configuration.
      description: ''
      operationId: deleteUserToken
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: userSlug
          in: path
          required: true
          type: string
        - name: id
          in: query
          required: false
          type: integer
          format: int32
      responses:
        '200':
          description: SonarQube user token configuration deleted
        '401':
          description: The authenticated user does not match the one tokens are requested for
        '404':
          description: The SonarQube user does not exist
definitions:
  RestAdminConfig:
    type: object
    properties:
      name:
        type: string
        description: Give a name to your server configuration to reference it.
      description:
        type: string
        description: An optional text to describe this server configuration.
      sonarServerUrl:
        type: string
        description: 'This is the base URL of your Sonar server instance (e.g., "http://192.168.1.27:9000").'
      sonarDisplayUrl:
        type: string
        description: 'This URL will be used for all outgoing links to the SonarQube Web UI. You only have to configure this if a different URL should be used than the "Sonar Base URL", e.g. when your SonarQube and Bitbucket server is in a different network.'
      sonarOrganizationKey:
        type: string
        description: This is the organization key for your SonarCloud account.
      sonarLogin:
        type: string
        description: 'Leave empty if anonymous login is enabled or if you want to use token-based authentication. If your Sonar server requires authentication, provide a valid user login (with system administration permissions if you want the plug-in to provision projects with properties).'
      sonarPassword:
        type: string
        description: Only leave empty if anonymous login is enabled. Will be stored encrypted in the Bitbucket Server database.
      sonarUserToken:
        type: string
        description: Enter your SonarQube user token if you want to use token-based authentication instead of using login/password.
      allowUserTokens:
        type: boolean
        description: Allow users to use their own SonarQube account when making requests to this SonarQube server from Bitbucket.
      invalidWebhookState:
        type: string
        description: 'OPTIONAL: State of webhook configuration if not valid for this app in the SonarQube server'
      requireUserTokensType:
        type: string
        description: Type of user tokens requirement.
        enum:
          - NOT_REQUIRED
          - REQUIRE_ALL_ACTIONS
          - REQUIRE_WRITABLE_ACTIONS
      illegalBranchReplacement:
        type: string
        description: Replacement for illegal branch characters.
      manualWebhookEnabled:
        type: boolean
        description: 'The app creates a global webhook in SonarQube to get notified about new analysis results. This requires SonarQube system admin permissions. If you do not want to configure system admin credentials, enable this option.'
      manualWebhookSecret:
        type: string
        description: The secret for the manual webhook from SonarQube.
      id:
        type: integer
        format: int32
        description: ID of the referenced server configuration. Only necessary when updating/deleting a configuration.
    xml:
      name: adminconfig
  RestProjectConfig:
    type: object
    required:
      - duplicateCode
      - issues
      - mergeChecks
      - project
      - provisioning
      - statistics
      - testCoverage
    properties:
      project:
        $ref: '#/definitions/RestProjectSonarProjectConfig'
      issues:
        $ref: '#/definitions/RestRepoIssueConfig'
      duplicateCode:
        $ref: '#/definitions/RestRepoDuplicateCodeConfig'
      testCoverage:
        $ref: '#/definitions/RestRepoTestCoverageConfig'
      statistics:
        $ref: '#/definitions/RestRepoStatisticsConfig'
      mergeChecks:
        $ref: '#/definitions/RestRepoMergeCheckConfig'
      provisioning:
        $ref: '#/definitions/RestRepoProvisioningConfig'
  RestProjectSonarProjectConfig:
    type: object
    properties:
      useSonarBranchFeature:
        type: boolean
        description: (available from plug-in version >= 1.15); Use the commercial SonarQube branching and pull request feature which creates branches (-Dsonar.branch.name) and pull requests (-Dsonar.pullRequest.*) inside the same Sonar project and does not result in separate projects anymore as it was the case with -Dsonar.branch.
      showIssuesInSource:
        type: boolean
        description: 'When enabled, Sonar issues, coverage and duplicate lines will be shown in the Bitbucket source file view as well.'
      illegalBranchCharReplacement:
        type: string
        description: 'Only configure for SonarQube Community versions 7.9.x or 8.4 and newer, otherwise leave it empty! These versions only allow the following characters in its project keys: [0-9a-zA-Z:\-_.:]. Therefore, a "/" which is typically used in Git branch naming patterns (e.g., features/user-story-xyz) must be replaced by the provided character here. Make sure that this branch key replacement character matches the one in your build system (e.g., Sonar for Bamboo).'
      branchPrefix:
        type: string
        description: 'Only necessary if you have Sonar project keys where the branch name differs from the one in Bitbucket. If you have a branch key like "origin/branch" in your Sonar project key, you therefore might want to set this field to "origin/".'
      pullRequestBranch:
        type: string
        description: '(available from plug-in version >= 1.11); Only necessary if you want to use the special pull request branches "refs/pull-requests/*/from" instead of the source branch of the pull request to get data from SonarQube. This might be useful if you only build & analyze pull request branches, but not the source branch of the pull request. Use values like "refs/pull-requests/%d/from" or "pull-requests/%d" and the app will replace "%d" with the actual pull request ID. Note that you must not enable this if you want to use pull request analysis of commercial SonarQube editions or SonarCloud.'
      projectCleanupEnabled:
        type: boolean
        description: Deletes a Sonar project when its corresponding branch is deleted in Bitbucket (avoids to clutter up SonarQube when a lot of Sonar projects are created due to code reviews with branches).
      forkCleanupEnabled:
        type: boolean
        description: '(available from plug-in version >= 1.11); will also delete a Sonar project for a deleted branch in a repository fork (CAUTION: such a project might be referenced from the origin repository and other forks, therefore make sure that you really want this).'
      noSonarProjectBehaviour:
        type: string
        description: Configure the apps behaviour when a Sonar project does not exist for the source or target branch of a pull request.
        enum:
          - POLL
          - DISABLE_PLUGIN
      matchingBranchesRegex:
        type: string
        description: '(available from plug-in version >= 1.12); The app will only be enabled for pull requests with source branches matching this regular expression. Example for only analyzing feature branches: feature/.* You can also use negative patterns like ((?!feature/).)* to enable it for everything except feature branches.'
  RestRepoConfig:
    type: object
    required:
      - duplicateCode
      - issues
      - mergeChecks
      - project
      - provisioning
      - statistics
      - testCoverage
    properties:
      project:
        $ref: '#/definitions/RestRepoProjectConfig'
      issues:
        $ref: '#/definitions/RestRepoIssueConfig'
      duplicateCode:
        $ref: '#/definitions/RestRepoDuplicateCodeConfig'
      testCoverage:
        $ref: '#/definitions/RestRepoTestCoverageConfig'
      statistics:
        $ref: '#/definitions/RestRepoStatisticsConfig'
      mergeChecks:
        $ref: '#/definitions/RestRepoMergeCheckConfig'
      provisioning:
        $ref: '#/definitions/RestRepoProvisioningConfig'
  RestRepoDuplicateCodeConfig:
    type: object
    properties:
      showDuplicateCode:
        type: boolean
        description: Shows duplicate code lines found in the source view.
  RestRepoIssueConfig:
    type: object
    properties:
      showSonarIssues:
        type: boolean
        description: Show Sonar issues in the pull request diff.
      sonarIssueMinSeverity:
        type: string
        description: Only issues with severity equal or higher than this will be shown.
        enum:
          - INFO
          - MINOR
          - MAJOR
          - CRITICAL
          - BLOCKER
  RestRepoMergeCheckConfig:
    type: object
    properties:
      mergeChecksForMatches:
        type: string
        description: '(available from plug-in version >= 1.13); Only run merge checks for SOURCE branches of a pull request matching this regex (leave empty to always run merge checks). Example for excluding feature branches: ^(?!feature\/).*$'
      targetMergeChecksForMatches:
        type: string
        description: '(available from plug-in version >= 1.14); Only run merge checks for TARGET branches of a pull request matching this regex (leave empty to always run merge checks). This is useful when you e.g. only want to run merge checks when you merge into release/develop/master branches but do not want to run them when merging feature branches. Example for only checking these branches: master|develop|release.*'
      qualityGatesEnabled:
        type: boolean
        description: 'This will use the configured quality gates for the SonarQube project as merge checks. If any of the quality gates has an error, merging of pull requests will be prevented.'
      usersToIgnoreMergeCheck:
        type: string
        description: 'A list of Bitbucket Server users separated with "|!|" which should be allowed to merge even if a quality gate fails. Example: adam|!|sara'
      groupsToIgnoreMergeCheck:
        type: string
        description: 'A list of Bitbucket Server groups separated with "|!|" which members should be allowed to merge even if a quality gate fails. Example: devs|!|ops'
  RestRepoProjectConfig:
    type: object
    properties:
      sonarEnabled:
        type: boolean
        description: true if the app should be enabled for this repository
      inheritFromProject:
        type: boolean
        description: true if you want to inherit the plug-ins settings for this repository from the project; not supported for repository forks
      serverConfigId:
        type: integer
        format: int32
        description: Choose the SonarQube server to be used for this repository. Use the SonarQube server configuration REST service to get this ID.
      masterProjectKey:
        type: string
        description: Choose the Sonar project of your master branch. This is also the project from which properties and quality profiles are copied when branch project provisioning is active.
      projectBaseKey:
        type: string
        description: 'This is the base project key of your Sonar project. The app will append the branch name to it (<sonar project base key>:<sonar-branch>, e.g. "org.apache.commons:commons-lang3:master") to fetch Sonar projects in SonarQube community editions. For commercial editions, this option is not used.'
      useSonarBranchFeature:
        type: boolean
        description: (available from plug-in version >= 1.15); Use the commercial SonarQube branching and pull request feature which creates branches (-Dsonar.branch.name) and pull requests (-Dsonar.pullRequest.*) inside the same Sonar project and does not result in separate projects anymore as it was the case with -Dsonar.branch.
      buildType:
        type: string
        description: 'Use compatibility mode when automatic mode does not work for you. While compatibility mode can be significantly slower to fetch data from SonarQube, it should work in cases where the automatic mode does not.'
        enum:
          - AUTO
          - COMPATIBILITY
      showIssuesInSource:
        type: boolean
        description: 'When enabled, Sonar issues, coverage and duplicate lines will be shown in the Bitbucket source file view as well.'
      illegalBranchCharReplacement:
        type: string
        description: 'Only configure for SonarQube Community versions 7.9.x or 8.4 and newer, otherwise leave it empty! These versions only allow the following characters in its project keys: [0-9a-zA-Z:\-_.:]. Therefore, a "/" which is typically used in Git branch naming patterns (e.g., features/user-story-xyz) must be replaced by the provided character here. Make sure that this branch key replacement character matches the one in your build system (e.g., Sonar for Bamboo).'
      branchPrefix:
        type: string
        description: 'Only necessary if you have Sonar project keys where the branch name differs from the one in Bitbucket. If you have a branch key like "origin/branch" in your Sonar project key, you therefore might want to set this field to "origin/".'
      pullRequestBranch:
        type: string
        description: '(available from plug-in version >= 1.11); Only necessary if you want to use the special pull request branches "refs/pull-requests/*/from" instead of the source branch of the pull request to get data from SonarQube. This might be useful if you only build & analyze pull request branches, but not the source branch of the pull request. Use values like "refs/pull-requests/%d/from" or "pull-requests/%d" and the app will replace "%d" with the actual pull request ID. Note that you must not enable this if you want to use pull request analysis of commercial SonarQube editions or SonarCloud.'
      projectCleanupEnabled:
        type: boolean
        description: Deletes a Sonar project when its corresponding branch is deleted in Bitbucket (avoids to clutter up SonarQube when a lot of Sonar projects are created due to code reviews with branches).
      forkCleanupEnabled:
        type: boolean
        description: '(available from plug-in version >= 1.11); will also delete a Sonar project for a deleted branch in a repository fork (CAUTION: such a project might be referenced from the origin repository and other forks, therefore make sure that you really want this).'
      noSonarProjectBehaviour:
        type: string
        description: Configure the apps behaviour when a Sonar project does not exist for the source or target branch of a pull request.
        enum:
          - POLL
          - DISABLE_PLUGIN
      matchingBranchesRegex:
        type: string
        description: '(available from plug-in version >= 1.12); The app will only be enabled for pull requests with source branches matching this regular expression. Example for only analyzing feature branches: feature/.* You can also use negative patterns like ((?!feature/).)* to enable it for everything except feature branches.'
  RestRepoProvisioningConfig:
    type: object
    properties:
      qualityProfileProvisioningEnabled:
        type: boolean
        description: 'SonarQube quality profiles are not shared between main and feature branch projects. If this setting is enabled, this plug-in will copy all quality profiles from the master to a branch project.'
      propertiesProvisioningEnabled:
        type: boolean
        description: 'SonarQube project properties (like file exclusion patterns) that are configured in the main branch project are not applied to a new branch project automatically. If this setting is enabled, this plug-in will copy all project properties from the master to the branch project.'
      qualityGateProvisioningEnabled:
        type: boolean
        description: Copies the assigned quality gate from the main branch project to new branch projects automatically.
  RestRepoStatisticsConfig:
    type: object
    properties:
      showStatistics:
        type: boolean
        description: Shows Sonar statistics on the pull request overview screen.
      showBranchStatistics:
        type: boolean
        description: Shows Sonar branch statistics in the repository source view.
      showQualityGatesInLists:
        type: boolean
        description: Show quality gate status in the pull request and branches lists.
  RestRepoTestCoverageConfig:
    type: object
    properties:
      showCoverage:
        type: boolean
        description: Marks uncovered code lines in the source and pull request diff view.
  RestUserToken:
    type: object
    required:
      - id
      - sonarServerConfig
      - sonarServerConfigId
      - sonarUserToken
    properties:
      sonarUserToken:
        type: string
      sonarServerConfig:
        $ref: '#/definitions/RestAdminConfig'
      sonarServerConfigId:
        type: integer
        format: int32
      id:
        type: integer
        format: int32
    xml:
      name: usertoken
